{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "lang-mc",
	"patterns": [
		{
			"include": "#namespace_context"
		}
	],
	"repository": {
		"namespace_context": {
			"patterns": [
				{
					"include": "#multiline_comment"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#import"
				},
				{
					"include": "#multiline_script"
				},
				{
					"include": "#macro_def"
				},
				{
					"include": "#dir_def"
				},
				{
					"include": "#clock_def"
				},
				{
					"include": "#function_def"
				},
				{
					"include": "#recipe_def"
				},
				{
					"include": "#item_type_def"
				},
				{
					"include": "#predicate_def"
				},
				{
					"include": "#fluid_type_def"
				},
				{
					"include": "#loot_table_def"
				},
				{
					"include": "#block_type_def"
				},
				{
					"include": "#advancement_def"
				},
				{
					"include": "#entity_type_def"
				},
				{
					"include": "#function_tag_def"
				},
				{
					"include": "#item_modifier_def"
				},
				{
					"include": "#dimension_def"
				},
				{
					"include": "#worldgen_def"
				},
				{
					"include": "#namespace_context.compile_if"
				},
				{
					"include": "#namespace_context.compile_loop"
				},
				{
					"include": "#namespace_context.shorthand_compile_if"
				}
			]
		},
		"function_context": {
			"patterns": [
				{
					"include": "#escaped_comment"
				},
				{
					"include": "#multiline_comment"
				},
				{
					"include": "#inline_script"
				},
				{
					"include": "#multiline_script"
				},
				{
					"include": "#function_context.compile_if"
				},
				{
					"include": "#function_context.compile_loop"
				},
				{
					"include": "#warn_command"
				},
				{
					"include": "#error_command"
				},
				{
					"include": "#load_block"
				},
				{
					"include": "#tick_block"
				},
				{
					"include": "#sequence_block"
				},
				{
					"include": "#async_while_loop"
				},
				{
					"include": "#while_loop"
				},
				{
					"include": "#until_loop"
				},
				{
					"include": "#schedule_block"
				},
				{
					"include": "#function_block"
				},
				{
					"include": "#execute_run_block"
				},
				{
					"include": "#execute_if_block"
				},
				{
					"include": "#execute_if_else_block"
				},
				{
					"include": "#execute_else_block"
				},
				{
					"include": "#multiline_command"
				},
				{
					"include": "source.mcfunction2"
				}
			]
		},
		"import": {
			"match": "^[ \t]*(import)\\s*(.+)$",
			"name": "entity.name.function",
			"captures": {
				"1": {
					"name": "keyword.control"
				},
				"2": {
					"name": "string"
				}
			}
		},
		"json_ref_list": {
			"match": "^[ \t]*(.+)[ \n]+$",
			"name": "entity.name.function"
		},
		"multiline_comment": {
			"begin": "^[ \t]*(###)(.+)?$",
			"beginCaptures": {
				"0": {
					"name": "comment.block"
				}
			},
			"end": "^[ \t]*(###)(.+)?$",
			"endCaptures": {
				"0": {
					"name": "comment.block"
				}
			},
			"name": "comment.block"
		},
		"escaped_comment": {
			"match": "^[ \t]*(\\\\#)(.+)$",
			"captures": {
				"1": {
					"name": "constant.character.escape"
				},
				"2": {
					"name": "comment.line",
					"patterns": [{ "include": "#inline_script" }]
				}
			},
			"name": "escaped_comment"
		},
		"multiline_command": {
			"begin": "(?:^[ \t]*|(?<=}[ \t]*))\\( *$",
			"end": "^[ \t]*\\) *",
			"name": "multiline_command",
			"patterns": [{ "include": "source.mcfunction2" }]
		},
		"macro_def": {
			"begin": "(?:^[ \t]*|(?<=}[ \t]*))(macro) (\\S+)\\s*{[ \n]*$",
			"beginCaptures": {
				"1": {
					"name": "keyword.control"
				}
			},
			"end": "^[ \t]*} *",
			"name": "macro_def",
			"patterns": [
				{
					"include": "#function_context"
				}
			]
		},
		"tick_block": {
			"begin": "(?:^[ \t]*|(?<=}[ \t]*))(tick) *{[ \n]*$",
			"beginCaptures": {
				"1": {
					"name": "keyword.control"
				}
			},
			"end": "^[ \t]*} *",
			"name": "tick_block",
			"patterns": [
				{
					"include": "#function_context"
				}
			]
		},
		"load_block": {
			"begin": "(?:^[ \t]*|(?<=}[ \t]*))(load) *{[ \n]*$",
			"beginCaptures": {
				"1": {
					"name": "keyword.control"
				}
			},
			"end": "^[ \t]*} *",
			"name": "load_block",
			"patterns": [
				{
					"include": "#function_context"
				}
			]
		},
		"dir_def": {
			"begin": "(?:^[ \t]*|(?<=}[ \t]*))(dir) ([\\S ]+) *{[ \n]*$",
			"end": "^[ \t]*} *",
			"captures": {
				"1": {
					"name": "keyword.control.dir"
				},
				"2": {
					"name": "entity.name.function",
					"patterns": [
						{
							"include": "#inline_script"
						}
					]
				}
			},
			"name": "dir",
			"patterns": [
				{
					"include": "#namespace_context"
				}
			]
		},
		"function_def": {
			"begin": "(?:^[ \t]*|(?<=}[ \t]*))(function) ([\\S ]+) *{[ \n]*$",
			"end": "^[ \t]*} *",
			"captures": {
				"1": {
					"name": "keyword.control.function"
				},
				"2": {
					"name": "entity.name.function",
					"patterns": [
						{
							"include": "#inline_script"
						}
					]
				}
			},
			"name": "function",
			"patterns": [
				{
					"include": "#function_context"
				}
			]
		},
		"comment": {
			"match": "^[ \t]*(#.+)$",
			"captures": {
				"1": {
					"patterns": [
						{
							"include": "#inline_script"
						}
					]
				}
			},
			"name": "comment.line"
		},
		"multiline_script": {
			"begin": "(?:^[ \t]*|(?<=}[ \t]*))<%%[ \n]*",
			"end": "[ \t]*%%>[ \n]*$",
			"beginCaptures": {
				"0": {
					"name": "punctuation.paren.open"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.paren.close"
				}
			},
			"contentName": "meta.embedded.block.javascript",
			"name": "multiline_script",
			"patterns": [
				{
					"include": "source.js"
				}
			]
		},
		"inline_script": {
			"match": "(<%)(.*?)?(%>)",
			"captures": {
				"1": {
					"name": "constant.character"
				},
				"2": {
					"name": "meta.embedded.block.javascript",
					"patterns": [
						{
							"include": "source.js"
						}
					]
				},
				"3": {
					"name": "constant.character"
				}
			},
			"name": "inline_script"
		},
		"while_loop": {
			"begin": "(?:^[ \t]*|(?<=}[ \t]*))(while)\\((.+)\\) *{[ \n]*$",
			"beginCaptures": {
				"1": {
					"name": "keyword.control"
				},
				"2": {
					"patterns": [
						{
							"include": "source.mcfunction2"
						}
					]
				}
			},
			"end": "^[ \t]*} *",
			"name": "while_loop",
			"patterns": [
				{
					"include": "#function_context"
				}
			]
		},
		"async_while_loop": {
			"begin": "(?:^[ \t]*|(?<=}[ \t]*))(async) (while)\\((.+) *(,) *([\\d\\.]+(t|s|d)|\\$\\$\\d+)\\) *{[ \n]*$",
			"beginCaptures": {
				"1": {
					"name": "entity.name.function"
				},
				"2": {
					"name": "keyword.control"
				},
				"3": {
					"patterns": [
						{
							"include": "source.mcfunction2"
						}
					]
				},
				"4": {
					"name": "variable.language"
				},
				"5": {
					"name": "constant.numeric"
				}
			},
			"end": "^[ \t]*} *",
			"endCaptures": {
				"1": {}
			},
			"name": "while_loop",
			"patterns": [
				{
					"include": "#function_context"
				}
			]
		},
		"until_loop": {
			"begin": "(?:^[ \t]*|(?<=}[ \t]*))(until)\\((.+) *(,) *([\\d\\.]+(t|s|d)|\\$\\$\\d+)\\) *{[ \n]*$",
			"beginCaptures": {
				"1": {
					"name": "keyword.control"
				},
				"2": {
					"patterns": [
						{
							"include": "source.mcfunction2"
						}
					]
				},
				"3": {
					"name": "variable.language"
				},
				"4": {
					"name": "constant.numeric"
				}
			},
			"end": "^[ \t]*} *",
			"name": "until_loop",
			"patterns": [
				{
					"include": "#function_context"
				}
			]
		},
		"namespace_context.compile_loop": {
			"begin": "(?:^[ \t]*|(?<=}[ \t]*))(LOOP)\\s*\\((.+)\\)\\s*{[ \n]*$",
			"end": "^[ \t]*} *",
			"beginCaptures": {
				"1": {
					"name": "keyword.control"
				},
				"2": {
					"patterns": [
						{
							"include": "#compile_loop.arguments"
						}
					]
				}
			},
			"name": "namespace_context.compile_loop",
			"patterns": [
				{
					"include": "#namespace_context"
				}
			]
		},
		"function_context.compile_loop": {
			"begin": "(?:^[ \t]*|(?<=}[ \t]*))(LOOP)\\s*\\((.+)\\)\\s*{[ \n]*$",
			"end": "^[ \t]*} *",
			"beginCaptures": {
				"1": {
					"name": "keyword.control"
				},
				"2": {
					"patterns": [
						{
							"include": "#compile_loop.arguments"
						}
					]
				}
			},
			"name": "function_context.compile_loop",
			"patterns": [
				{
					"include": "#function_context"
				}
			]
		},
		"compile_loop.arguments": {
			"match": "(.+)(,)(.+)",
			"captures": {
				"1": {
					"name": "meta.embedded.block.javascript",
					"patterns": [
						{
							"include": "source.js"
						}
					]
				},
				"2": {
					"name": "variable.language"
				},
				"3": {
					"name": "variable.name"
				}
			},
			"name": "compile_loop"
		},
		"namespace_context.compile_if": {
			"begin": "(?:^[ \t]*|(?<=}[ \t]*))(!?IF)\\s*\\((.+)\\)\\s*{[ \n]*$",
			"end": "^[ \t]*} *",
			"beginCaptures": {
				"1": {
					"name": "keyword.control"
				},
				"2": {
					"patterns": [
						{
							"include": "source.js"
						}
					]
				}
			},
			"name": "namespace_context.compile_if",
			"patterns": [
				{
					"include": "#namespace_context"
				}
			]
		},
		"function_context.compile_if": {
			"begin": "(?:^[ \t]*|(?<=}[ \t]*))(!?IF)\\s*\\((.+)\\)\\s*{[ \n]*$",
			"end": "^[ \t]*} *",
			"beginCaptures": {
				"1": {
					"name": "keyword.control"
				},
				"2": {
					"patterns": [
						{
							"include": "source.js"
						}
					]
				}
			},
			"name": "function_context.compile_if",
			"patterns": [
				{
					"include": "#function_context"
				}
			]
		},
		"namespace_context.shorthand_compile_if": {
			"begin": "(?:^[ \t]*|(?<=}[ \t]*))(!)\\s*(.+?)\\s*{[ \n]*$",
			"end": "^[ \t]*} *",
			"beginCaptures": {
				"1": {
					"name": "keyword.control"
				},
				"2": {
					"patterns": [
						{
							"include": "source.js"
						}
					]
				}
			},
			"name": "shorthand_compile_if",
			"patterns": [
				{
					"include": "#namespace_context"
				}
			]
		},
		"function_context.shorthand_compile_if": {
			"begin": "(?:^[ \t]*|(?<=}[ \t]*))(!)\\s*(.+?)\\s*{[ \n]*$",
			"end": "^[ \t]*} *",
			"beginCaptures": {
				"1": {
					"name": "keyword.control"
				},
				"2": {
					"patterns": [
						{
							"include": "source.js"
						}
					]
				}
			},
			"name": "shorthand_compile_if",
			"patterns": [
				{
					"include": "#function_context"
				}
			]
		},
		"execute_run_block": {
			"begin": "(^[ \t]*execute.* run\\s*(block\\s*)?){[ \n]*$",
			"beginCaptures": {
				"1": {
					"patterns": [
						{
							"include": "source.mcfunction2"
						}
					]
				}
			},
			"end": "^[ \t]*} *",
			"name": "execute_run_block",
			"patterns": [
				{
					"include": "#function_context"
				}
			]
		},
		"function_block": {
			"begin": "(?:^[ \t]*|(?<=}[ \t]*))(block|(?<=} *)finally)? *{[ \n]*$",
			"beginCaptures": {
				"1": {
					"name": "keyword.control"
				}
			},
			"end": "^[ \t]*} *",
			"name": "function_block",
			"patterns": [
				{
					"include": "#function_context"
				}
			]
		},
		"loot_table_def": {
			"begin": "(?:^[ \t]*|(?<=}[ \t]*))(loot) (.+)\\s*{[ \n]*$",
			"beginCaptures": {
				"1": {
					"name": "keyword.control"
				},
				"2": {
					"name": "entity.name.function",
					"patterns": [
						{
							"include": "#inline_script"
						}
					]
				}
			},
			"end": "^[ \t]*} *",
			"name": "loot_table_def",
			"patterns": [
				{
					"include": "source.json"
				}
			]
		},
		"advancement_def": {
			"begin": "(?:^[ \t]*|(?<=}[ \t]*))(advancement) (.+)\\s*{[ \n]*$",
			"beginCaptures": {
				"1": {
					"name": "keyword.control"
				},
				"2": {
					"name": "entity.name.function",
					"patterns": [
						{
							"include": "#inline_script"
						}
					]
				}
			},
			"end": "^[ \t]*} *",
			"name": "advancement_def",
			"patterns": [
				{
					"include": "source.json"
				}
			]
		},
		"entity_type_def": {
			"begin": "(?:^[ \t]*|(?<=}[ \t]*))(entities) (\\S+)( replace)?\\s*{[ \n]*$",
			"beginCaptures": {
				"1": {
					"name": "keyword.control"
				},
				"2": {
					"name": "entity.name.function",
					"patterns": [
						{
							"include": "#inline_script"
						}
					]
				},
				"3": {
					"name": "constant.numeric"
				}
			},
			"end": "^[ \t]*} *",
			"name": "entity_type_def",
			"patterns": [
				{
					"include": "#json_ref_list"
				}
			]
		},
		"function_tag_def": {
			"begin": "(?:^[ \t]*|(?<=}[ \t]*))(functions) (\\S+)( replace)?\\s*{[ \n]*$",
			"beginCaptures": {
				"1": {
					"name": "keyword.control"
				},
				"2": {
					"name": "entity.name.function",
					"patterns": [
						{
							"include": "#inline_script"
						}
					]
				},
				"3": {
					"name": "constant.numeric"
				}
			},
			"end": "^[ \t]*} *",
			"name": "function_tag_def",
			"patterns": [
				{
					"include": "#json_ref_list"
				}
			]
		},
		"item_modifier_def": {
			"begin": "(?:^[ \t]*|(?<=}[ \t]*))(modifier) (.+)\\s*{[ \n]*$",
			"beginCaptures": {
				"1": {
					"name": "keyword.control"
				},
				"2": {
					"name": "entity.name.function",
					"patterns": [
						{
							"include": "#inline_script"
						}
					]
				}
			},
			"end": "^[ \t]*} *",
			"name": "item_modifier_def",
			"patterns": [
				{
					"include": "source.json"
				}
			]
		},
		"block_type_def": {
			"begin": "(?:^[ \t]*|(?<=}[ \t]*))(blocks) (\\S+)( replace)?\\s*{[ \n]*$",
			"beginCaptures": {
				"1": {
					"name": "keyword.control"
				},
				"2": {
					"name": "entity.name.function",
					"patterns": [
						{
							"include": "#inline_script"
						}
					]
				},
				"3": {
					"name": "constant.numeric"
				}
			},
			"end": "^[ \t]*} *",
			"name": "block_type_def",
			"patterns": [
				{
					"include": "#json_ref_list"
				}
			]
		},
		"item_type_def": {
			"begin": "(?:^[ \t]*|(?<=}[ \t]*))(items) (\\S+)( replace)?\\s*{[ \n]*$",
			"beginCaptures": {
				"1": {
					"name": "keyword.control"
				},
				"2": {
					"name": "entity.name.function",
					"patterns": [
						{
							"include": "#incline_script"
						}
					]
				},
				"3": {
					"name": "constant.numeric"
				}
			},
			"end": "^[ \t]*} *",
			"name": "item_type_def",
			"patterns": [
				{
					"include": "#json_ref_list"
				}
			]
		},
		"fluid_type_def": {
			"begin": "(?:^[ \t]*|(?<=}[ \t]*))(fluids) (\\S+)( replace)?\\s*{[ \n]*$",
			"beginCaptures": {
				"1": {
					"name": "keyword.control"
				},
				"2": {
					"name": "entity.name.function",
					"patterns": [
						{
							"include": "#inline_script"
						}
					]
				},
				"3": {
					"name": "constant.numeric"
				}
			},
			"end": "^[ \t]*} *",
			"name": "fluid_type_def",
			"patterns": [
				{
					"include": "#json_ref_list"
				}
			]
		},
		"predicate_def": {
			"begin": "(?:^[ \t]*|(?<=}[ \t]*))(predicate) (.+)\\s*{[ \n]*$",
			"beginCaptures": {
				"1": {
					"name": "keyword.control"
				},
				"2": {
					"name": "entity.name.function",
					"patterns": [
						{
							"include": "#inline_script"
						}
					]
				}
			},
			"end": "^[ \t]*} *",
			"name": "predicate_def",
			"patterns": [
				{
					"include": "source.json"
				}
			]
		},
		"recipe_def": {
			"begin": "(?:^[ \t]*|(?<=}[ \t]*))(recipe) (.+)\\s*{[ \n]*$",
			"beginCaptures": {
				"1": {
					"name": "keyword.control"
				},
				"2": {
					"name": "entity.name.function",
					"patterns": [
						{
							"include": "#inline_script"
						}
					]
				}
			},
			"end": "^[ \t]*} *",
			"name": "recipe_def",
			"patterns": [
				{
					"include": "source.json"
				}
			]
		},
		"dimension_def": {
			"begin": "(?:^[ \t]*|(?<=}[ \t]*))(dimension) (.+)\\s*{[ \n]*$",
			"beginCaptures": {
				"1": {
					"name": "keyword.control"
				},
				"2": {
					"name": "entity.name.function",
					"patterns": [
						{
							"include": "#inline_script"
						}
					]
				}
			},
			"end": "^[ \t]*} *",
			"name": "dimension_def",
			"patterns": [
				{
					"include": "source.json"
				}
			]
		},
		"worldgen_def": {
			"begin": "(?:^[ \t]*|(?<=}[ \t]*))(worldgen) (.+)\\s*{[ \n]*$",
			"beginCaptures": {
				"1": {
					"name": "keyword.control"
				},
				"2": {
					"name": "entity.name.function",
					"patterns": [
						{
							"include": "#inline_script"
						}
					]
				}
			},
			"end": "^[ \t]*} *",
			"name": "worldgen_def",
			"patterns": [
				{
					"include": "source.json"
				}
			]
		},
		"execute_if_block": {
			"begin": "(?:^[ \t]*|(?<=}[ \t]*))(execute)\\s*\\((.+)\\)\\s*{[ \n]*$",
			"beginCaptures": {
				"1": {
					"name": "keyword.control"
				},
				"2": {
					"patterns": [
						{
							"include": "source.mcfunction2"
						}
					]
				}
			},
			"end": "^[ \t]*}",
			"name": "execute_if_block",
			"patterns": [
				{
					"include": "#function_context"
				}
			]
		},
		"execute_if_else_block": {
			"begin": "(?<=\\})\\s*(else) (execute)\\s*\\((.+)\\)\\s*{[ \n]*$",
			"beginCaptures": {
				"1": {
					"name": "keyword.control"
				},
				"2": {
					"name": "keyword.control"
				},
				"3": {
					"patterns": [
						{
							"include": "source.mcfunction2"
						}
					]
				}
			},
			"end": "^[ \t]*}",
			"name": "execute_if_else_block",
			"patterns": [
				{
					"include": "#function_context"
				}
			]
		},
		"execute_else_block": {
			"begin": "(?<=\\})\\s*(else)\\s*{[ \n]*$",
			"beginCaptures": {
				"1": {
					"name": "keyword.control"
				}
			},
			"end": "^[ \t]*} *",
			"name": "execute_else_block",
			"patterns": [
				{
					"include": "#function_context"
				}
			]
		},
		"clock_def": {
			"begin": "(?:^[ \t]*|(?<=}[ \t]*))(clock)\\s*([\\d\\.]+(t|s|d)|\\$\\$\\d+)\\s*{[ \n]*$",
			"beginCaptures": {
				"1": {
					"name": "keyword.control"
				},
				"2": {
					"name": "constant.numeric"
				}
			},
			"end": "^[ \t]*} *",
			"name": "clock_def",
			"patterns": [
				{
					"include": "#function_context"
				}
			]
		},
		"schedule_block": {
			"begin": "(?:^[ \t]*|(?<=}[ \t]*))(schedule) ([\\d\\.]+(t|s|d)|\\$\\$\\d+)( replace| append)? *{[ \n]*$",
			"beginCaptures": {
				"1": {
					"name": "keyword.control"
				},
				"2": {
					"name": "constant.numeric"
				},
				"4": {
					"name": "entity.name"
				}
			},
			"end": "^[ \t]*} *",
			"name": "schedule_block",
			"patterns": [
				{
					"include": "#function_context"
				}
			]
		},
		"sequence_block": {
			"begin": "(?:^[ \t]*|(?<=}[ \t]*))(sequence) *{[ \t]*$",
			"beginCaptures": {
				"1": {
					"name": "keyword.control"
				}
			},
			"end": "^[ \t]*} *",
			"name": "sequence_block",
			"patterns": [
				{
					"match": "^[ \t]*(delay) ([\\d\\.]+(t|s|d)|\\$\\$\\d+)[ \t]*$",
					"captures": {
						"1": {
							"name": "keyword.control"
						},
						"2": {
							"name": "constant.numeric"
						}
					}
				},
				{
					"include": "#function_context"
				}
			]
		},
		"warn_command": {
			"match": "(?:^[ \t]*|(?<=}[ \t]*))(warn) (.+)$",
			"captures": {
				"1": {
					"name": "entity.name.section"
				},
				"2": {
					"name": "string"
				}
			}
		},
		"error_command": {
			"match": "(?:^[ \t]*|(?<=}[ \t]*))(error) (.+)$",
			"captures": {
				"1": {
					"name": "constant.numeric"
				},
				"2": {
					"name": "string"
				}
			}
		}
	},
	"scopeName": "source.lang-mc"
}
